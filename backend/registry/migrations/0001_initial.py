# Generated by Django 5.1.3 on 2025-01-06 09:57

import backend.registry.models
import django.contrib.sites.managers
import django.db.models.deletion
import django.db.models.manager
import django_countries.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('sites', '0002_alter_domain_unique'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.CharField(default=backend.registry.models.uuid, editable=False, max_length=12, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('url', models.URLField(blank=True, null=True, verbose_name='URL')),
                ('description', models.TextField(blank=True, null=True)),
                ('sites', models.ManyToManyField(to='sites.site')),
            ],
            options={
                'ordering': ['name'],
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('site_objects', django.contrib.sites.managers.CurrentSiteManager('sites')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.CharField(default=backend.registry.models.uuid, editable=False, max_length=12, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('orcid', models.CharField(blank=True, max_length=19, null=True, verbose_name='ORCID Id')),
                ('sites', models.ManyToManyField(to='sites.site')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'People',
                'ordering': ['user__first_name', 'user__last_name'],
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('site_objects', django.contrib.sites.managers.CurrentSiteManager('sites')),
            ],
        ),
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('id', models.CharField(default=backend.registry.models.uuid, editable=False, max_length=12, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('short_name', models.CharField(max_length=50, unique=True)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('ror', models.CharField(blank=True, max_length=9, null=True, verbose_name='ROR Id')),
                ('sites', models.ManyToManyField(to='sites.site')),
                ('people', models.ManyToManyField(blank=True, related_name='organisations', to='registry.person')),
            ],
            options={
                'ordering': ['name'],
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('site_objects', django.contrib.sites.managers.CurrentSiteManager('sites')),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.CharField(default=backend.registry.models.uuid, editable=False, max_length=12, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sites.site')),
                ('people', models.ManyToManyField(blank=True, related_name='groups', to='registry.person')),
            ],
            options={
                'ordering': ['name'],
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('site_objects', django.contrib.sites.managers.CurrentSiteManager('site')),
            ],
        ),
        migrations.CreateModel(
            name='PersonRole',
            fields=[
                ('id', models.CharField(default=backend.registry.models.uuid, editable=False, max_length=12, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sites.site')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('site', 'name')},
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('site_objects', django.contrib.sites.managers.CurrentSiteManager('site')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.CharField(default=backend.registry.models.uuid, editable=False, max_length=12, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(unique=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='projects/logos')),
                ('style', models.TextField(blank=True, null=True)),
                ('site', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='sites.site')),
            ],
            options={
                'ordering': ['site__name'],
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.CharField(default=backend.registry.models.uuid, editable=False, max_length=12, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('archived', models.BooleanField(default=False, help_text='If checked, this resource will not be shown in the registry by default. It will still be accessible if requested.')),
                ('name', models.CharField(max_length=255)),
                ('kind', models.CharField(choices=[('MATERIAL', 'Material'), ('TEST_METHOD', 'Test method'), ('PROTOCOL_SOP', 'Protocol or SOP'), ('DATA', 'Data')], max_length=100, verbose_name='Type of resource')),
                ('description', models.TextField(blank=True, null=True)),
                ('data_link', models.URLField(blank=True, help_text='Link to the resource (e.g. Zenodo, Figshare, etc.)', null=True, verbose_name='Resource link')),
                ('harmonised_json', models.JSONField(blank=True, help_text='JSON file containing the harmonised data', null=True, verbose_name='Harmonised JSON data')),
                ('groups', models.ManyToManyField(blank=True, related_name='resources', to='registry.group', verbose_name='Use cases')),
                ('license', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='resources', to='registry.license')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sites.site')),
            ],
            options={
                'ordering': ['name', 'kind'],
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('site_objects', django.contrib.sites.managers.CurrentSiteManager('site')),
            ],
        ),
        migrations.CreateModel(
            name='ResourceFile',
            fields=[
                ('id', models.CharField(default=backend.registry.models.uuid, editable=False, max_length=12, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('file', models.FileField(upload_to=backend.registry.models.resource_file_path)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='registry.resource')),
            ],
            options={
                'ordering': ['resource', 'file'],
            },
        ),
        migrations.CreateModel(
            name='ResourceStatus',
            fields=[
                ('id', models.CharField(default=backend.registry.models.uuid, editable=False, max_length=12, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('position', models.PositiveIntegerField(default=0)),
                ('name', models.CharField(max_length=100)),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sites.site')),
            ],
            options={
                'verbose_name_plural': 'Resource statuses',
                'ordering': ['position'],
                'unique_together': {('site', 'name')},
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('site_objects', django.contrib.sites.managers.CurrentSiteManager('site')),
            ],
        ),
        migrations.AddField(
            model_name='resource',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='resources', to='registry.resourcestatus'),
        ),
        migrations.CreateModel(
            name='StudyDesign',
            fields=[
                ('id', models.CharField(default=backend.registry.models.uuid, editable=False, max_length=12, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('archived', models.BooleanField(default=False, help_text='If checked, this study design map will not be shown in the registry by default. It will still be accessible if requested.')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='study_designs', to='registry.group', verbose_name='Use cases')),
                ('license', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='study_designs', to='registry.license')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sites.site')),
            ],
            options={
                'ordering': ['name'],
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('site_objects', django.contrib.sites.managers.CurrentSiteManager('site')),
            ],
        ),
        migrations.CreateModel(
            name='StudyDesignNodeTag',
            fields=[
                ('id', models.CharField(default=backend.registry.models.uuid, editable=False, max_length=12, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=25, unique=True)),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sites.site')),
            ],
            options={
                'ordering': ['name'],
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('site_objects', django.contrib.sites.managers.CurrentSiteManager('site')),
            ],
        ),
        migrations.CreateModel(
            name='StudyDesignNodeType',
            fields=[
                ('id', models.CharField(default=backend.registry.models.uuid, editable=False, max_length=12, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=20)),
                ('color', models.CharField(max_length=7)),
                ('description', models.TextField(blank=True, null=True)),
                ('position', models.PositiveIntegerField(default=0)),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sites.site')),
            ],
            options={
                'ordering': ['position'],
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('site_objects', django.contrib.sites.managers.CurrentSiteManager('site')),
            ],
        ),
        migrations.CreateModel(
            name='StudyDesignNode',
            fields=[
                ('id', models.CharField(default=backend.registry.models.uuid, editable=False, max_length=12, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('position_x', models.IntegerField()),
                ('position_y', models.IntegerField()),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('organisation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='study_design_nodes', to='registry.organisation')),
                ('related_study_design', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='related_nodes', to='registry.studydesign')),
                ('resources', models.ManyToManyField(blank=True, related_name='study_design_nodes', to='registry.resource')),
                ('study_design', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nodes', to='registry.studydesign')),
                ('tags', models.ManyToManyField(blank=True, related_name='nodes', to='registry.studydesignnodetag')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='nodes', to='registry.studydesignnodetype')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Contributor',
            fields=[
                ('id', models.CharField(default=backend.registry.models.uuid, editable=False, max_length=12, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('object_id', models.CharField(max_length=12)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contributes_to_resources', to='registry.person')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.personrole')),
            ],
            options={
                'ordering': ['role__name', 'person'],
                'indexes': [models.Index(fields=['content_type', 'object_id'], name='registry_co_content_256038_idx')],
                'unique_together': {('content_type', 'object_id', 'person', 'role')},
            },
        ),
        migrations.CreateModel(
            name='StudyDesignEdge',
            fields=[
                ('id', models.CharField(default=backend.registry.models.uuid, editable=False, max_length=12, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('sourceHandle', models.CharField(max_length=100)),
                ('targetHandle', models.CharField(max_length=100)),
                ('study_design', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='edges', to='registry.studydesign')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='edges_out', to='registry.studydesignnode')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='edges_in', to='registry.studydesignnode')),
            ],
            options={
                'unique_together': {('source', 'target')},
            },
        ),
    ]
